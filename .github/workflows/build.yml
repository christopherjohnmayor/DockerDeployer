name: Build and Release

# This workflow builds Docker images and creates releases for the DockerDeployer project.
# It runs on pushes to main branch and on version tags, providing automated CI/CD.
#
# Features:
# - Multi-architecture Docker builds (amd64, arm64)
# - Docker layer caching for faster builds
# - Automated semantic versioning
# - GitHub releases with changelogs
# - Security scanning with Trivy
# - Build artifact attestation

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build even without changes"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: dockerdeployer

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: christopherjohnmayor/dockerdeployer
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=christopherjohnmayor/dockerdeployer:buildcache-backend
          cache-to: type=registry,ref=christopherjohnmayor/dockerdeployer:buildcache-backend,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=christopherjohnmayor/dockerdeployer:buildcache-frontend
          cache-to: type=registry,ref=christopherjohnmayor/dockerdeployer:buildcache-frontend,mode=max

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## DockerDeployer ${{ github.ref_name }}

            ${{ steps.changelog.outputs.changelog }}

            ### Docker Images

            - Backend: `christopherjohnmayor/dockerdeployer:${{ github.ref_name }}-backend`
            - Frontend: `christopherjohnmayor/dockerdeployer:${{ github.ref_name }}-frontend`

            ### Installation

            ```bash
            docker-compose -f docker-compose.prod.yml up -d
            ```
          draft: false
          prerelease: false
