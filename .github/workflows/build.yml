name: Build and Release

# This workflow builds Docker images and creates releases for the DockerDeployer project.
# It runs on pushes to main branch and on version tags, providing automated CI/CD.
#
# Features:
# - Multi-architecture Docker builds (amd64, arm64)
# - Docker layer caching for faster builds
# - Automated semantic versioning
# - GitHub releases with changelogs
# - Security scanning with Trivy
# - Build artifact attestation
# - SBOM generation

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build even without changes"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: dockerdeployer
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}
      backend-version: ${{ steps.backend-meta.outputs.version }}
      frontend-version: ${{ steps.frontend-meta.outputs.version }}
      backend-tags: ${{ steps.backend-meta.outputs.tags }}
      frontend-tags: ${{ steps.frontend-meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: christopherjohnmayor/dockerdeployer-backend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: christopherjohnmayor/dockerdeployer-frontend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=registry,ref=christopherjohnmayor/dockerdeployer-backend:buildcache
          cache-to: type=registry,ref=christopherjohnmayor/dockerdeployer-backend:buildcache,mode=max
          sbom: true
          provenance: true

      - name: Build and push frontend
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=registry,ref=christopherjohnmayor/dockerdeployer-frontend:buildcache
          cache-to: type=registry,ref=christopherjohnmayor/dockerdeployer-frontend:buildcache,mode=max
          sbom: true
          provenance: true

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: christopherjohnmayor/dockerdeployer-backend:${{ steps.backend-meta.outputs.version }}
          format: "sarif"
          output: "backend-trivy-results.sarif"

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: christopherjohnmayor/dockerdeployer-frontend:${{ steps.frontend-meta.outputs.version }}
          format: "sarif"
          output: "frontend-trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "."

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 10

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          configuration: |
            {
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": ["feature", "enhancement"]
                },
                {
                  "title": "## üêõ Bug Fixes",
                  "labels": ["bug", "fix"]
                },
                {
                  "title": "## üß∞ Maintenance",
                  "labels": ["maintenance", "dependencies"]
                }
              ],
              "template": "#{{CHANGELOG}}\n\n**Full Changelog**: #{{UNCATEGORIZED}}"
            }

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## DockerDeployer ${{ github.ref_name }}

            ${{ steps.changelog.outputs.changelog }}

            ### üê≥ Docker Images

            - **Backend**: `christopherjohnmayor/dockerdeployer-backend:${{ github.ref_name }}`
            - **Frontend**: `christopherjohnmayor/dockerdeployer-frontend:${{ github.ref_name }}`

            ### üì¶ Installation

            ```bash
            # Download docker-compose.prod.yml
            curl -O https://raw.githubusercontent.com/christopherjohnmayor/DockerDeployer/${{ github.ref_name }}/docker-compose.prod.yml

            # Set environment variables
            export BACKEND_TAG=${{ github.ref_name }}
            export FRONTEND_TAG=${{ github.ref_name }}

            # Deploy
            docker-compose -f docker-compose.prod.yml up -d
            ```

            ### üîí Security

            All images have been scanned for vulnerabilities using Trivy.

            ### üìã Checksums

            - Backend Digest: `${{ needs.build-and-push.outputs.backend-digest }}`
            - Frontend Digest: `${{ needs.build-and-push.outputs.frontend-digest }}`
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}
