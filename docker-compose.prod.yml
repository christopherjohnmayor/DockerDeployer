version: '3.8'

services:
  # Backend service
  backend:
    image: christopherjohnmayor/dockerdeployer:${BACKEND_TAG:-latest}-backend
    container_name: dockerdeployer-backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - config_repo:/app/config_repo
      - db_data:/app/data
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///./data/dockerdeployer.db
      - SECRET_KEY=${SECRET_KEY}
      - CONFIG_REPO_PATH=/app/config_repo
      - CORS_ORIGINS=https://${DOMAIN}
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Frontend service
  frontend:
    image: christopherjohnmayor/dockerdeployer:${FRONTEND_TAG:-latest}-frontend
    container_name: dockerdeployer-frontend
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: dockerdeployer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: dockerdeployer-certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app_network

volumes:
  config_repo:
  db_data:

networks:
  app_network:
    driver: bridge
