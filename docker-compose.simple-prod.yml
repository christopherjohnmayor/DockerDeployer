version: "3.8"

services:
  # Backend service
  backend:
    image: christopherjohnmayor/dockerdeployer-backend:latest
    container_name: dockerdeployer-backend
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - db_data:/app/data
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///./data/dockerdeployer.db
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=http://localhost:3000
      - EMAIL_PROVIDER=${EMAIL_PROVIDER:-sendgrid}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@localhost}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME:-DockerDeployer}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - FRONTEND_URL=http://localhost:3000
      - LLM_PROVIDER=${LLM_PROVIDER:-openrouter}
      - LLM_MODEL=${LLM_MODEL:-meta-llama/llama-3.2-3b-instruct:free}
      - OPENROUTER_API_URL=${OPENROUTER_API_URL:-https://openrouter.ai/api/v1/chat/completions}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend service
  frontend:
    image: christopherjohnmayor/dockerdeployer-frontend:latest
    container_name: dockerdeployer-frontend
    ports:
      - "3000:80"
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  db_data:

networks:
  app_network:
    driver: bridge
